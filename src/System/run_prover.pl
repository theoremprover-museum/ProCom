%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% $Id: run_prover.pl,v 1.8 1995/01/27 13:45:38 gerd Exp $
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% 
%%% This file is part of ProCom.
%%% It is distributed under the GNU General Public License.
%%% See the file COPYING for details.
%%% 
%%% (c) Copyright 1995 Gerd Neugebauer
%%% 
%%% Net: gerd@imn.th-leipzig.de
%%% 
%%%****************************************************************************

:- module_interface(run_prover). /*%-------------------------------------------
\FileId{Gerd Neugebauer}{\RCSstrip$Revision: 1.8 $}

This module provides predicates to run provers generated by a Prolog compiler.
The generated code has to conform to the following restrictions:

\begin{itemize}
\item The external file may not contain a module.\\
  The external file is automatically loaded into the module |prover|. It is
  expected that the interface predicates can be found there.
\item The external file has to provide the predicates |goal/0| and |goal/1|.
\end{itemize}

\PL*/
:- export run_prover/0,
	  run_prover/1.

:- begin_module(run_prover).
/*PL%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

\PL*/
:-	lib(options),
	lib(message).
/*PL%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

\PL*/
:- define_option 'run:remove_prover'	    = on.
/*PL%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The boolean option |run:remove_prover| indicates if the prover file is removed
after the prove attempt is ended.

\PL*/
:- define_option 'run:time_limit'	    = off.
/*PL%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The option |run:time_limit| can take a positive integer $n$\/ to indicate that
the runtime should be at most $n$\/ seconds. Alternatively it can take the
value |off| to indcate that no time limit should be used.

\Predicate run_prover/0().

\PL*/
run_prover :-
	is_option(output_file,ProverFile),
	run_prover(ProverFile).
/*PL%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

\Predicate run_prover/1(+File).

The file |File| is  considered as compiled  prover. This prover is loaded into
the module |prover| and executed. Several checks are  performed to ensure that
|File| is a proper specification.

Finally the prover file will be deleted if the flag |run:remove_prover| is set.

\PL*/
run_prover(ProverFile) :-
	( empty_option(ProverFile) ->
	    err("*** Can't read stdout")
	; ProverFile == '*' ->
	    true
	; \+ is_option(prolog,eclipse) ->
	    err("*** I seem to have an invalid Prolog dialect. Run denied.")
	; \+ ( atom(ProverFile)
	     ; string(ProverFile) ) ->
	    err("*** Type error for prover file. Atom or string expected: ",
		ProverFile)
	; \+ exists(ProverFile) ->
	    err("*** Prover file not found: ",ProverFile)
	;
	    ( current_module(prover) ->
		true
	    ;	create_module(prover)
	    ),
	    call(compile(ProverFile),prover),
	    is_option(log_file,LogFile),
	    is_option('run:time_limit',Time),
	    ( (integer(Time), Time>0) ->
		current_interrupt(I_ID,alrm),
		set_interrupt_handler(I_ID,run_prover_timeout_handler/0),
		alarm(Time),
		get_interrupt_handler(I_ID,_,_),
		block(call(goal(LogFile),prover),
		      prover,
		      run_report_timeout(LogFile)),
		set_interrupt_handler(I_ID,true/0)
	    ;
		call(goal(LogFile),prover)
	    ),
	    ( is_option('run:remove_prover') ->
		delete(ProverFile)
	    ;	true
	    )
	).
/*PL%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

\Predicate run_prover_timeout_handler/0().

\PL*/
run_prover_timeout_handler :-
	writeln("\n*** TIMEOUT"),
	exit_block(prover).
/*PL%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

\Predicate run_report_timeout/1(+LogFile).

This predicate is called when a timeout has been encountered. It writes an
appropriate message to the log file --- if given.

\PL*/
run_report_timeout(LogFile) :-
	( \+ empty_option(LogFile) ->
	    open(LogFile,append,Stream),
	    printf(Stream,"timeout.\n",[]),
	    close(Stream)
	;   true
	).
/*PL%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
\EndProlog */
